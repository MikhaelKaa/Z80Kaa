    ; указываем ассемблеру, что целевая платформа - spectrum48, хотя это и не так, но похуй...
    device ZXSPECTRUM48
    ;SIZE 32768
    
begin:
    org 0x0000
    ; Запрещаем прерывания.
    di
    ld bc, 8192
    call delay
    jp start

    org 0x0038 ; 56 
    di
    push af
    push bc
    push hl
    push de
    ;int programm
    call lcd_clear
    ld hl, Int_msg
    call lcd_print
    ld bc, 400
    call delay
    call test_sq
    
    ; end int programm
    ld bc, 65535
intdelay:
    dec bc
    ld a,b
    or c
    jr nz, intdelay
    pop de
    pop hl
    pop bc
    pop af
    ei
    reti

    org 0x0100
start:
    
    ; Устанавливаем дно стека.
    ld sp, 0x7ff7  ; M48T35, с часами.
    ;ld sp, 0x7fff ; M48Z35Y, без часов.
    ; Разрешаем прерывания.
    ei    

    ; Моргаем светодиодом
    ld a, 0 ; 0b00000000
    call port_fe_and_delay

    ld a, 0b00000001
    call port_fe_and_delay

    ld a, 0b00000000
    call port_fe_and_delay

    ld a, 0b00001111
    call port_fe_and_delay

    ld a, 0b00000000
    call port_fe_and_delay

    ld a, 0b00000001
    call port_fe_and_delay

    ; Включим ШИМ и подсветку LCD1602
    ld a, 0b00001010
    out (0xfe), a

    ; Инициализация 1602
    call lcd_init

    ld bc, 500
    call delay

    ld hl, Hello_msg
    call lcd_print
    
    ;
    ld de, startup_end - startup
    ld hl, startup
    call test_pwm_loop

    call lcd_clear

main_loop:  
    in a, (port_kb)
    cp a, 0b11111110
    jp z, ok

    in a, (port_kb)
    cp a, 0b11111101
    jp z, up

    in a, (port_kb)
    cp a, 0b11111011
    jp z, down

    jp (skip)

up:
    call set_time
    jp (skip)

down:
test_pre_ny:
    ld hl, msg_pre_ny
    call lcd_print
    ld de, startup_end - startup
    ld hl, startup
    call test_pwm_loop

    ld bc, 40000
    call delay
    call lcd_clear

    ld bc, 400
    call delay
    call lcd_home

 
    jp (skip)
ok:
    call lcd_clear
    jp main_loop 

skip:

    ;call show_time
    ld a, (0x7ffb)
    rra
    rra
    rra
    rra
    and a, 0b00000011
    call lcd_print_num  
    ld bc, 10
    call delay
    
    ld a, (0x7ffb)
    and a, 0b00001111
    call lcd_print_num
    ld bc, 10
    call delay

    ld a, 0x3a
    call lcd_put
    ld bc, 10
    call delay

    ld a, (0x7ffa)
    rra
    rra
    rra
    rra
    and a, 0b00000111
    call lcd_print_num  
    ld bc, 10
    call delay
    
    ld a, (0x7ffa)
    and a, 0b00001111
    call lcd_print_num
    ld bc, 10
    call delay

    ld a, 0x3a
    call lcd_put
    ld bc, 10
    call delay

    ld a, (0x7ff9)
    rra
    rra
    rra
    rra
    and a, 0b00000111
    call lcd_print_num  
    ld bc, 20
    call delay
    
    ld a, (0x7ff9)
    and a, 0b00001111
    call lcd_print_num
    ld bc, 20
    call delay

    call lcd_home

    ; Задержка.
    ld bc, 25000
    call delay

    jp main_loop 

    ; Драйвер экрана
    include lcd1602.asm
    include m48t35.asm

test_sq:
    ld de, 1024
.loop:
    ld a, e
    ;cpl
    out (port_pwm), a

    dec de
    ld a, d
    or e
    jr nz, test_sq.loop ; можно просто .loop 
    ret

;test_pwm
    ;ld de, pwm_sin_128_end - pwm_sin_128
    ;ld hl, pwm_sin_128
    ;ld de, tada_end - tada
    ;ld hl, tada
test_pwm_loop:
    
    ld bc, 25
    nop
    nop
    nop
    nop    
    call delay

    ld a, (hl)
    ;rra
    ;rla
    ;cpl
    
    out (port_pwm), a
    inc hl

    dec de
    ld a, d
    or e
    jr nz, test_pwm_loop
    ret
pwm_array db 0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae,0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8,0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3,0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
pwm_array_ db 0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51,0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27,0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c
pwm_array_end

pwm_sin_128 db 0x80,0x86,0x8c,0x92,0x98,0x9e,0xa5,0xaa,0xb0,0xb6,0xbc,0xc1,0xc6,0xcb,0xd0,0xd5,0xda,0xde,0xe2,0xe6,0xea,0xed,0xf0,0xf3,0xf5,0xf8,0xfa,0xfb,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfb,0xfa,0xf8,0xf5,0xf3,0xf0,0xed,0xea,0xe6,0xe2,0xde,0xda,0xd5,0xd0,0xcb,0xc6,0xc1,0xbc,0xb6,0xb0,0xaa,0xa5,0x9e,0x98,0x92,0x8c,0x86
pwm_sin_128_ db 0x80,0x79,0x73,0x6d,0x67,0x61,0x5a,0x55,0x4f,0x49,0x43,0x3e,0x39,0x34,0x2f,0x2a,0x25,0x21,0x1d,0x19,0x15,0x12,0xf,0xc,0xa,0x7,0x5,0x4,0x2,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x2,0x4,0x5,0x7,0xa,0xc,0xf,0x12,0x15,0x19,0x1d,0x21,0x25,0x2a,0x2f,0x34,0x39,0x3e,0x43,0x49,0x4f,0x55,0x5a,0x61,0x67,0x6d,0x73,0x79,0x80
pwm_sin_128_end


; Процедура задержки
delay:
    dec bc
    ld a, b
    or c
    jr nz, delay
    ret

; Запишет в порт 0xfe содержимое аккумулятора     
port_fe_and_delay
    out (0xfe), a
    ld bc, 20000
    call delay

; Различные переменные и константы.
Test_msg db "test message", 0
Hello_msg db "Z80Kaa board", 0
Int_msg db "interrupt", 0
warn_msg db "warning", 0
msg_startup db "startup", 0
msg_pre_ny db "C Hac", 0xbf, "y", 0xbe, "a", 0xc6, 0xe6, 0xb8, 0xbc, 0

msg db 0x74, 0x6f, 0x73, 0x79, 0x61, 0


menu_obj defw menu_obj_0
menu defw menu_obj_0, menu_obj_1, menu_obj_2, 0
menu_obj_0 defw menu_0
menu_obj_0_text db "menu_0", 0
menu_0

    ret

menu_obj_1 defw menu_1
menu_obj_1_text db "menu_1", 0
menu_1

    ret

menu_obj_2 defw menu_2
menu_obj_2_text db "menu_2", 0
menu_2

    ret
port_pwm  EQU 0xff
port_kb  EQU 0xfe
cnt db 0

;tada
    ;incbin "tada.wav", 45
;tada_end
startup:
    ;incbin "startup.wav", 0x86, 30000
    incbin "tada.wav", 0x86
startup_end:


end:
    ; Выводим размер банарника.
    display "code size: ", /d, end - begin
    SAVEBIN "out.bin", begin, 32768; 32768 - размер бинарного файла для прошивки ПЗУ\ОЗУ